@startuml

class CustomerCell {

}

class ItemCell {

}

class AddressCell {

}

abstract ConfigurableCell << (P, GoldenRod) >> {
    func configure(with cellModel: CellModel)
}

CustomerCell -down- ConfigurableCell
ItemCell -down- ConfigurableCell
AddressCell -down- ConfigurableCell


class CustomerCellModel << (S, Orange) >> {
    let value: String
}

class ItemCellModel << (S, Orange) >> {
    let value: String
}

class AddressCellModel << (S, Orange) >> {
    let value: String
}

abstract CellModel<< (P, GoldenRod) >> {
    var sectionType: TableViewSectionType { get }
}

CustomerCellModel -down- CellModel
ItemCellModel -down- CellModel
AddressCellModel -down- CellModel

class CustomerSectionHeaderModel << (S, Orange) >> {
}

class ItemSectionHeaderModel << (S, Orange) >> {
}

class AddressSectionHeaderModel << (S, Orange) >> {
}

abstract SectionHeaderModel << (P, GoldenRod) >> {
    var sectionType: TableViewSectionType { get }
    var isHidden: Bool { get }
}

CustomerSectionHeaderModel -down-SectionHeaderModel
ItemSectionHeaderModel -down-SectionHeaderModel
AddressSectionHeaderModel -down-SectionHeaderModel

class CustomerSectionFooterModel << (S, Orange) >> {
}

class ItemSectionFooterModel << (S, Orange) >> {
}

class AddressSectionFooterModel << (S, Orange) >> {
}

abstract SectionFooterModel << (P, GoldenRod) >> {
    var sectionType: TableViewSectionType { get }
    var isHidden: Bool { get }
}

CustomerSectionFooterModel -down- SectionFooterModel
ItemSectionFooterModel -down- SectionFooterModel
AddressSectionFooterModel -down- SectionFooterModel

enum TableViewSectionType {
    case customer
    case item
    case address

    func cellIdentifier() -> String
}

CellModel -down- TableViewSectionType
SectionHeaderModel -down- TableViewSectionType
SectionFooterModel -down- TableViewSectionType

class ViewControllerWireframe {
    weak var view: UIViewController?

    func showCustomerDetail(name: String)
    func showItemDetail(itemName: String)
    func showAddressDetail(address: String)
}

class ViewController {
    var tableView: UITableView
    func numberOfSections(in tableView: UITableView) -> Int
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView?
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
}

class ViewControllerPresenter {
    weak var view: UIViewController?
    let wireframe: ViewControllerWireframeProtocol
    let customerUseCase: GetUseCaseProtocol
    let itemUseCase: GetUseCaseProtocol
    let addressUseCase: GetUseCaseProtocol

    func numberOfSections() -> Int
    func numberOfRows(in section: Int) -> Int
    func itemData(of indexPath: IndexPath) -> CellModel?
    func sectionHeaderModel(of section: Int) -> SectionHeaderModel
    func sectionFooterModel(of section: Int) -> SectionFooterModel
    func didSelectRow(of indexPath: IndexPath)
}

nameSpace GetCustomerUseCase {
    class GetCustomerUseCase << (S, Orange) >> {
        let useCaseInput: GetCustomerUseCaseInput
    }

    abstract GetCustomerUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetCustomerRepository << (S, Orange) >> {
        let repositoryInput: GetCustomerRepositoryInput
    }

    abstract GetCustomerRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetCustomerDataStore << (S, Orange) >> {
        let customerName: String?
    }

    GetCustomerUseCase -right- GetCustomerRepository
    GetCustomerRepository -right- GetCustomerDataStore

    GetCustomerUseCaseInput -up- GetCustomerRepository
    GetCustomerRepositoryInput -up- GetCustomerDataStore
}

namespace GetItemUseCase {
    class GetItemUseCase << (S, Orange) >> {
        let useCaseInput: GetItemUseCaseInput
    }

    abstract GetItemUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetItemRepository << (S, Orange) >> {
        let repositoryInput: GetItemRepositoryInput
    }

    abstract GetItemRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetItemDataStore << (S, Orange) >> {
        let value: String?
    }

    GetItemUseCase -right- GetItemRepository
    GetItemRepository -right- GetItemDataStore

    GetItemUseCaseInput -up- GetItemRepository
    GetItemRepositoryInput -up- GetItemDataStore
}

namespace GetAddressUseCase {
    class GetAddressUseCase << (S, Orange) >> {
        let useCaseInput: GetAddressUseCaseInput
    }

    abstract GetAddressUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetAddressRepository << (S, Orange) >> {
        let repositoryInput: GetAddressRepositoryInput
    }

    abstract GetAddressRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class GetAddressDataStore << (S, Orange) >> {
        let value: String?
    }

    abstract GetUseCaseProtocol << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    GetAddressUseCase -right- GetAddressRepository
    GetAddressRepository -right- GetAddressDataStore

    GetAddressUseCaseInput -up- GetAddressRepository
    GetAddressRepositoryInput -up- GetAddressDataStore
}

class TableViewSectionHeaderUtilities << (S, Orange) >> {
    func header(for headerModel: SectionHeaderModel) -> UIView?
    func height(for headerModel: SectionHeaderModel) -> CGFloat
}

class TableViewSectionFooterUtilities << (S, Orange) >> {
    func footer(for footerModel: SectionFooterModel) -> UIView?
    func height(for footerModel: SectionFooterModel) -> CGFloat
}

ViewController -down- ViewControllerPresenter
ViewController -left- ViewControllerWireframe
ViewControllerPresenter -left- ViewControllerWireframe
ViewControllerPresenter -down- GetCustomerUseCase
ViewControllerPresenter -down- GetItemUseCase
ViewControllerPresenter -down- GetAddressUseCase

ViewController - ConfigurableCell
ViewController -up- CellModel
ViewController -up- TableViewSectionType
ViewController -up- SectionHeaderModel
ViewController -up- SectionFooterModel

ViewControllerPresenter - TableViewSectionType

ViewController -right- TableViewSectionHeaderUtilities
TableViewSectionHeaderUtilities - SectionHeaderModel
ViewController -right- TableViewSectionFooterUtilities
TableViewSectionFooterUtilities - SectionFooterModel

@enduml
