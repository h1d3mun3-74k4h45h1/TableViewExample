@startuml

class CustomerCell {

}

class ItemCell {

}

class AddressCell {

}

abstract ViewControllerConfigurableCell << (P, GoldenRod) >> {
    func configure(with cellModel: ViewControllerCellModel)
}

CustomerCell -down- ViewControllerConfigurableCell
ItemCell -down- ViewControllerConfigurableCell
AddressCell -down- ViewControllerConfigurableCell


class ViewControllerCustomerCellModel << (S, Orange) >> {
    let value: String
}

class ViewControllerItemCellModel << (S, Orange) >> {
    let value: String
}

class ViewControllerAddressCellModel << (S, Orange) >> {
    let value: String
}

abstract ViewControllerCellModel<< (P, GoldenRod) >> {
    var sectionType: ViewControllerTableViewSectionType { get }
}

ViewControllerCustomerCellModel -down- ViewControllerCellModel
ViewControllerItemCellModel -down- ViewControllerCellModel
ViewControllerAddressCellModel -down- ViewControllerCellModel

class ViewControllerCustomerSectionHeaderModel << (S, Orange) >> {
}

class ViewControllerItemSectionHeaderModel << (S, Orange) >> {
}

class ViewControllerAddressSectionHeaderModel << (S, Orange) >> {
}

abstract ViewControllerSectionHeaderModel << (P, GoldenRod) >> {
    var sectionType: ViewControllerTableViewSectionType { get }
    var isHidden: Bool { get }
}

ViewControllerCustomerSectionHeaderModel -down-ViewControllerSectionHeaderModel
ViewControllerItemSectionHeaderModel -down-ViewControllerSectionHeaderModel
ViewControllerAddressSectionHeaderModel -down-ViewControllerSectionHeaderModel

class ViewControllerCustomerSectionFooterModel << (S, Orange) >> {
}

class ViewControllerItemSectionFooterModel << (S, Orange) >> {
}

class ViewControllerAddressSectionFooterModel << (S, Orange) >> {
}

abstract ViewControllerSectionFooterModel << (P, GoldenRod) >> {
    var sectionType: ViewControllerTableViewSectionType { get }
    var isHidden: Bool { get }
}

ViewControllerCustomerSectionFooterModel -down- ViewControllerSectionFooterModel
ViewControllerItemSectionFooterModel -down- ViewControllerSectionFooterModel
ViewControllerAddressSectionFooterModel -down- ViewControllerSectionFooterModel

enum ViewControllerTableViewSectionType {
    case customer
    case item
    case address

    func cellIdentifier() -> String
}

ViewControllerCellModel -down- ViewControllerTableViewSectionType
ViewControllerSectionHeaderModel -down- ViewControllerTableViewSectionType
ViewControllerSectionFooterModel -down- ViewControllerTableViewSectionType

class ViewControllerWireframe {
    weak var view: UIViewController?

    func showCustomerDetail(name: String)
    func showItemDetail(itemName: String)
    func showAddressDetail(address: String)
}

class ViewController {
    var tableView: UITableView
    func numberOfSections(in tableView: UITableView) -> Int
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView?
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView?
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat

}

class ViewControllerPresenter {
    weak var view: UIViewController?
    let wireframe: ViewControllerWireframeProtocol
    let customerUseCase: ViewControllerUseCaseProtocol
    let itemUseCase: ViewControllerUseCaseProtocol
    let addressUseCase: ViewControllerUseCaseProtocol

    func numberOfSections() -> Int
    func numberOfRows(in section: Int) -> Int
    func itemData(of indexPath: IndexPath) -> ViewControllerCellModel?
    func sectionHeaderModel(of section: Int) -> ViewControllerSectionHeaderModel
    func sectionFooterModel(of section: Int) -> ViewControllerSectionFooterModel
    func didSelectRow(of indexPath: IndexPath)
}

nameSpace ViewControllerCustomerUseCase{
    class ViewControllerCustomerUseCase << (S, Orange) >> {
        let useCaseInput: ViewControllerCustomerUseCaseInput
    }

    abstract ViewControllerCustomerUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerCustomerRepository << (S, Orange) >> {
        let repositoryInput: ViewControllerCustomerRepositoryInput
    }

    abstract ViewControllerCustomerRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerCustomerDataStore << (S, Orange) >> {
        let customerName: String?
    }

    ViewControllerCustomerUseCase -right- ViewControllerCustomerRepository
    ViewControllerCustomerRepository -right- ViewControllerCustomerDataStore

    ViewControllerCustomerUseCaseInput -up- ViewControllerCustomerRepository
    ViewControllerCustomerRepositoryInput -up- ViewControllerCustomerDataStore
}

namespace ViewControllerItemUseCase {
    class ViewControllerItemUseCase << (S, Orange) >> {
        let useCaseInput: ViewControllerItemUseCaseInput
    }

    abstract ViewControllerItemUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerItemRepository << (S, Orange) >> {
        let repositoryInput: ViewControllerItemRepositoryInput
    }

    abstract ViewControllerItemRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerItemDataStore << (S, Orange) >> {
        let value: String?
    }

    ViewControllerItemUseCase -right- ViewControllerItemRepository
    ViewControllerItemRepository -right- ViewControllerItemDataStore

    ViewControllerItemUseCaseInput -up- ViewControllerItemRepository
    ViewControllerItemRepositoryInput -up- ViewControllerItemDataStore
}

namespace ViewControllerAddressUseCase {
    class ViewControllerAddressUseCase << (S, Orange) >> {
        let useCaseInput: ViewControllerAddressUseCaseInput
    }

    abstract ViewControllerAddressUseCaseInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerAddressRepository << (S, Orange) >> {
        let repositoryInput: ViewControllerAddressRepositoryInput
    }

    abstract ViewControllerAddressRepositoryInput << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    class ViewControllerAddressDataStore << (S, Orange) >> {
        let value: String?
    }

    abstract ViewControllerUseCaseProtocol << (P, GoldenRod) >> {
        func itemCount() -> Int
        func itemData(of index: Int) -> String?
    }

    ViewControllerAddressUseCase -right- ViewControllerAddressRepository
    ViewControllerAddressRepository -right- ViewControllerAddressDataStore

    ViewControllerAddressUseCaseInput -up- ViewControllerAddressRepository
    ViewControllerAddressRepositoryInput -up- ViewControllerAddressDataStore
}

class ViewControllerTableViewSectionHeaderUtilities << (S, Orange) >> {
    func header(for headerModel: ViewControllerSectionHeaderModel) -> UIView?
    func height(for headerModel: ViewControllerSectionHeaderModel) -> CGFloat
}

class ViewControllerTableViewSectionFooterUtilities << (S, Orange) >> {
    func footer(for footerModel: ViewControllerSectionFooterModel) -> UIView?
    func height(for footerModel: ViewControllerSectionFooterModel) -> CGFloat
}

ViewController -down- ViewControllerPresenter
ViewController -left- ViewControllerWireframe
ViewControllerPresenter -left- ViewControllerWireframe
ViewControllerPresenter -down- ViewControllerCustomerUseCase
ViewControllerPresenter -down- ViewControllerItemUseCase
ViewControllerPresenter -down- ViewControllerAddressUseCase

ViewController - ViewControllerConfigurableCell
ViewController -up- ViewControllerCellModel
ViewController -up- ViewControllerTableViewSectionType
ViewController -up- ViewControllerSectionHeaderModel
ViewController -up- ViewControllerSectionFooterModel

ViewControllerPresenter - ViewControllerTableViewSectionType

ViewController -right- ViewControllerTableViewSectionHeaderUtilities
ViewControllerTableViewSectionHeaderUtilities - ViewControllerSectionHeaderModel
ViewController -right- ViewControllerTableViewSectionFooterUtilities
ViewControllerTableViewSectionFooterUtilities - ViewControllerSectionFooterModel

@enduml
